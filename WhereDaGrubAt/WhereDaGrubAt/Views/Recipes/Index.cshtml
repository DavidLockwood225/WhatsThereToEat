<!--David Lockwood
    Items/Index view
    Displays table containing all recipes, with the ability to filter based on Category and/or Name
    Contains logic that alters the table based on the Recipe's NotUserDefined field
    NotUserDefined == false, User can edit and delete recipe
                   == true, User can only view the recipe's details'-->

@model WhereDaGrubAt.Models.RecipeCategoryViewModel

@{
    ViewData["Title"] = "Index";
}
<head>
    <style>
        fieldset {
            display: block;
            padding-top: 0.35em;
            padding-bottom: 0.625em;
            padding-left: 0.75em;
            padding-right: 0.75em;
            border: 2px groove;
        }

        legend {
            background-color: gray;
            color: white;
            padding: 5px 10px;
        }

        input {
            margin: 5px;
        }

        select {
            margin: 5px;
        }

        td, th {
            font-family: Calibri;
            position: relative;
            vertical-align: bottom;
        }
    </style>
</head>

<p></p>
<h1>Recipes</h1>
<p></p>

<form asp-controller="Recipes" asp-action="Index" method="get">
    <fieldset>
        <legend>Search Recipes:</legend>
        <p>
            Category: <select asp-for="RecipeCategory" asp-items="Model.Categories">
                <option value="">All</option>
            </select>
        </p>
        <p>
            <input type="text" name="SearchString" />
            <input type="submit" value="Search" />
        </p>
    </fieldset>
</form>

<p></p>
<p>
    <button class="btn btn-primary" type="button" onclick="location.href='@Url.Action("Create", "Recipes")'">Create New Recipe</button>
</p>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Recipes[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Recipes[0].Category)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Recipes[0].ServingSize)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Recipes)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Category)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ServingSize)
                </td>
                <td>
                    @if (item.NotUserDefined == false)
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id"><button class="btn btn-primary btn-sm">Edit</button></a>

                    }
                    <a asp-action="Details" asp-route-id="@item.Id"><button class="btn btn-primary btn-sm">Details</button></a>
                    @if (item.NotUserDefined == false)
                    {
                        <a asp-action="Delete" asp-route-id="@item.Id"><button class="btn btn-danger btn-sm">Delete</button></a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
